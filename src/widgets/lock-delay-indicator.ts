import { effect } from '@reatom/core';
import { lockDelayAtom } from '../models/lock-delay.ts';
import { lockDelayTimerVisibleAtom } from '../game-logic.ts';
import { LOCK_DELAY_TIME } from '../constants.ts';

/**
 * Lock Delay Timer Widget
 * –°–æ–∑–¥–∞–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å lock delay —Ç–∞–π–º–µ—Ä–∞
 */
export class LockDelayTimerWidget {
    private container: HTMLDivElement | null = null;
    private bar: HTMLDivElement | null = null;
    private intervalId: number | null = null;

    constructor() {
        this.initializeEffect();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ lock delay
     */
    private initializeEffect(): void {
        effect(() => {
            const lockDelay = lockDelayAtom();
            const isVisible = lockDelayTimerVisibleAtom();

            if (lockDelay.active && isVisible) {
                this.show();
                this.startVisualUpdate();
            } else {
                this.stopVisualUpdate();
                this.hide();
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     */
    private show(): void {
        if (this.container) return; // –£–∂–µ —Å–æ–∑–¥–∞–Ω

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container = document.createElement('div');
        this.container.className = 'lock-delay-timer';

        // –°–æ–∑–¥–∞–µ–º –ª–µ–π–±–ª
        const timerLabel = document.createElement('div');
        timerLabel.className = 'timer-label';
        timerLabel.textContent = 'LOCK DELAY';

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª–æ—Å–∫–∏
        const timerBarContainer = document.createElement('div');
        timerBarContainer.className = 'timer-bar-container';

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.bar = document.createElement('div');
        this.bar.className = 'timer-bar';

        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        timerBarContainer.appendChild(this.bar);
        this.container.appendChild(timerLabel);
        this.container.appendChild(timerBarContainer);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(this.container);
    }

    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç —Å —ç–∫—Ä–∞–Ω–∞
     */
    private hide(): void {
        if (this.container) {
            document.body.removeChild(this.container);
            this.container = null;
            this.bar = null;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–∞–π–º–µ—Ä–∞
     */
    private startVisualUpdate(): void {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        // if (this.intervalId) {
        //     clearTimeout(this.intervalId);
        // }

        const renderLoop = () => {
            const currentLockDelay = lockDelayAtom();
            if (!currentLockDelay.active || !this.bar) {
                // this.stopVisualUpdate();
                return;
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —É—á–µ—Ç–æ–º –ø–∞—É–∑—ã
            let elapsed: number;
            if (currentLockDelay.paused) {
                // –¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –¥–æ –ø–∞—É–∑—ã
                elapsed = currentLockDelay.pausedAt - currentLockDelay.startTime - currentLockDelay.totalPausedTime;
            } else {
                // –¢–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–∏–Ω—É—Å –≤—Å–µ –ø–∞—É–∑—ã
                elapsed = performance.now() - currentLockDelay.startTime - currentLockDelay.totalPausedTime;
            }

            const progress = Math.min(elapsed / LOCK_DELAY_TIME * 100, 100);

            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –ø–æ–ª–æ—Å–∫–∏
            this.bar.style.width = `${progress}%`;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            this.updateProgressColor(progress, currentLockDelay.paused);

            requestAnimationFrame(renderLoop);
        };

        requestAnimationFrame(renderLoop);
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        // this.intervalId = setTimeout(renderLoop, 16); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 50–º—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    private stopVisualUpdate(): void {
        if (this.intervalId) {
            // clearInterval(this.intervalId);
            this.intervalId = null;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç –ø–æ–ª–æ—Å–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—É–∑—ã
     */
    private updateProgressColor(progress: number, isPaused: boolean = false): void {
        if (!this.bar) return;

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ü–≤–µ—Ç–æ–≤
        this.bar.classList.remove('warning', 'critical', 'complete', 'paused');
        if (isPaused) {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø–∞—É–∑—ã
            this.bar.classList.add('paused');
        } else {
            // –û–±—ã—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if (progress >= 99) {
                this.bar.classList.add('complete');
            } else if (progress >= 85) {
                this.bar.classList.add('critical');
            } else if (progress >= 50) {
                this.bar.classList.add('warning');
            }
        }
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞
     */
    public initialize(): void {
        console.log('üîß Lock delay timer widget initialized');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∏–¥–∂–µ—Ç–∞
export const lockDelayTimerWidget = new LockDelayTimerWidget();
